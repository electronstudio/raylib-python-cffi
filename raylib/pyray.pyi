class PyRay:
    BLEND_ADDITIVE: int
    BLEND_ADD_COLORS: int
    BLEND_ALPHA: int
    BLEND_CUSTOM: int
    BLEND_MULTIPLIED: int
    BLEND_SUBTRACT_COLORS: int
    def begin_blend_mode(self, *args) -> None: ...
    def begin_drawing(self, *args) -> None: ...
    def begin_mode_2d(self, *args) -> None: ...
    def begin_mode_3d(self, *args) -> None: ...
    def begin_scissor_mode(self, *args) -> None: ...
    def begin_shader_mode(self, *args) -> None: ...
    def begin_texture_mode(self, *args) -> None: ...
    def begin_vr_stereo_mode(self, *args) -> None: ...
    CAMERA_CUSTOM: int
    CAMERA_FIRST_PERSON: int
    CAMERA_FREE: int
    CAMERA_ORBITAL: int
    CAMERA_ORTHOGRAPHIC: int
    CAMERA_PERSPECTIVE: int
    CAMERA_THIRD_PERSON: int
    CUBEMAP_LAYOUT_AUTO_DETECT: int
    CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE: int
    CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR: int
    CUBEMAP_LAYOUT_LINE_HORIZONTAL: int
    CUBEMAP_LAYOUT_LINE_VERTICAL: int
    CUBEMAP_LAYOUT_PANORAMA: int
    def change_directory(self, *args) -> int: ...
    def check_collision_box_sphere(self, *args) -> int: ...
    def check_collision_boxes(self, *args) -> int: ...
    def check_collision_circle_rec(self, *args) -> int: ...
    def check_collision_circles(self, *args) -> int: ...
    def check_collision_lines(self, *args) -> int: ...
    def check_collision_point_circle(self, *args) -> int: ...
    def check_collision_point_rec(self, *args) -> int: ...
    def check_collision_point_triangle(self, *args) -> int: ...
    def check_collision_ray_box(self, *args) -> int: ...
    def check_collision_ray_sphere(self, *args) -> int: ...
    def check_collision_ray_sphere_ex(self, *args) -> int: ...
    def check_collision_recs(self, *args) -> int: ...
    def check_collision_spheres(self, *args) -> int: ...
    def clear_background(self, *args) -> None: ...
    def clear_directory_files(self, *args) -> None: ...
    def clear_dropped_files(self, *args) -> None: ...
    def clear_window_state(self, *args) -> None: ...
    def close_audio_device(self, *args) -> None: ...
    def close_audio_stream(self, *args) -> None: ...
    def close_window(self, *args) -> None: ...
    def codepoint_to_utf8(self, *args) -> char: ...
    def color_alpha(self, *args) -> struct: ...
    def color_alpha_blend(self, *args) -> struct: ...
    def color_from_hsv(self, *args) -> struct: ...
    def color_from_normalized(self, *args) -> struct: ...
    def color_normalize(self, *args) -> struct: ...
    def color_to_hsv(self, *args) -> struct: ...
    def color_to_int(self, *args) -> int: ...
    def compress_data(self, *args) -> char: ...
    def decompress_data(self, *args) -> char: ...
    def directory_exists(self, *args) -> int: ...
    def disable_cursor(self, *args) -> None: ...
    def draw_billboard(self, *args) -> None: ...
    def draw_billboard_rec(self, *args) -> None: ...
    def draw_bounding_box(self, *args) -> None: ...
    def draw_circle(self, *args) -> None: ...
    def draw_circle_3d(self, *args) -> None: ...
    def draw_circle_gradient(self, *args) -> None: ...
    def draw_circle_lines(self, *args) -> None: ...
    def draw_circle_sector(self, *args) -> None: ...
    def draw_circle_sector_lines(self, *args) -> None: ...
    def draw_circle_v(self, *args) -> None: ...
    def draw_cube(self, *args) -> None: ...
    def draw_cube_texture(self, *args) -> None: ...
    def draw_cube_v(self, *args) -> None: ...
    def draw_cube_wires(self, *args) -> None: ...
    def draw_cube_wires_v(self, *args) -> None: ...
    def draw_cylinder(self, *args) -> None: ...
    def draw_cylinder_wires(self, *args) -> None: ...
    def draw_ellipse(self, *args) -> None: ...
    def draw_ellipse_lines(self, *args) -> None: ...
    def draw_fps(self, *args) -> None: ...
    def draw_grid(self, *args) -> None: ...
    def draw_line(self, *args) -> None: ...
    def draw_line_3d(self, *args) -> None: ...
    def draw_line_bezier(self, *args) -> None: ...
    def draw_line_bezier_quad(self, *args) -> None: ...
    def draw_line_ex(self, *args) -> None: ...
    def draw_line_strip(self, *args) -> None: ...
    def draw_line_v(self, *args) -> None: ...
    def draw_mesh(self, *args) -> None: ...
    def draw_mesh_instanced(self, *args) -> None: ...
    def draw_model(self, *args) -> None: ...
    def draw_model_ex(self, *args) -> None: ...
    def draw_model_wires(self, *args) -> None: ...
    def draw_model_wires_ex(self, *args) -> None: ...
    def draw_pixel(self, *args) -> None: ...
    def draw_pixel_v(self, *args) -> None: ...
    def draw_plane(self, *args) -> None: ...
    def draw_point_3d(self, *args) -> None: ...
    def draw_poly(self, *args) -> None: ...
    def draw_poly_lines(self, *args) -> None: ...
    def draw_ray(self, *args) -> None: ...
    def draw_rectangle(self, *args) -> None: ...
    def draw_rectangle_gradient_ex(self, *args) -> None: ...
    def draw_rectangle_gradient_h(self, *args) -> None: ...
    def draw_rectangle_gradient_v(self, *args) -> None: ...
    def draw_rectangle_lines(self, *args) -> None: ...
    def draw_rectangle_lines_ex(self, *args) -> None: ...
    def draw_rectangle_pro(self, *args) -> None: ...
    def draw_rectangle_rec(self, *args) -> None: ...
    def draw_rectangle_rounded(self, *args) -> None: ...
    def draw_rectangle_rounded_lines(self, *args) -> None: ...
    def draw_rectangle_v(self, *args) -> None: ...
    def draw_ring(self, *args) -> None: ...
    def draw_ring_lines(self, *args) -> None: ...
    def draw_sphere(self, *args) -> None: ...
    def draw_sphere_ex(self, *args) -> None: ...
    def draw_sphere_wires(self, *args) -> None: ...
    def draw_text(self, *args) -> None: ...
    def draw_text_codepoint(self, *args) -> None: ...
    def draw_text_ex(self, *args) -> None: ...
    def draw_text_rec(self, *args) -> None: ...
    def draw_text_rec_ex(self, *args) -> None: ...
    def draw_texture(self, *args) -> None: ...
    def draw_texture_ex(self, *args) -> None: ...
    def draw_texture_n_patch(self, *args) -> None: ...
    def draw_texture_poly(self, *args) -> None: ...
    def draw_texture_pro(self, *args) -> None: ...
    def draw_texture_quad(self, *args) -> None: ...
    def draw_texture_rec(self, *args) -> None: ...
    def draw_texture_tiled(self, *args) -> None: ...
    def draw_texture_v(self, *args) -> None: ...
    def draw_triangle(self, *args) -> None: ...
    def draw_triangle_3d(self, *args) -> None: ...
    def draw_triangle_fan(self, *args) -> None: ...
    def draw_triangle_lines(self, *args) -> None: ...
    def draw_triangle_strip(self, *args) -> None: ...
    def draw_triangle_strip_3d(self, *args) -> None: ...
    def enable_cursor(self, *args) -> None: ...
    def end_blend_mode(self, *args) -> None: ...
    def end_drawing(self, *args) -> None: ...
    def end_mode_2d(self, *args) -> None: ...
    def end_mode_3d(self, *args) -> None: ...
    def end_scissor_mode(self, *args) -> None: ...
    def end_shader_mode(self, *args) -> None: ...
    def end_texture_mode(self, *args) -> None: ...
    def end_vr_stereo_mode(self, *args) -> None: ...
    def export_image(self, *args) -> int: ...
    def export_image_as_code(self, *args) -> int: ...
    def export_mesh(self, *args) -> int: ...
    def export_wave(self, *args) -> int: ...
    def export_wave_as_code(self, *args) -> int: ...
    FLAG_FULLSCREEN_MODE: int
    FLAG_INTERLACED_HINT: int
    FLAG_MSAA_4X_HINT: int
    FLAG_VSYNC_HINT: int
    FLAG_WINDOW_ALWAYS_RUN: int
    FLAG_WINDOW_HIDDEN: int
    FLAG_WINDOW_HIGHDPI: int
    FLAG_WINDOW_MAXIMIZED: int
    FLAG_WINDOW_MINIMIZED: int
    FLAG_WINDOW_RESIZABLE: int
    FLAG_WINDOW_TOPMOST: int
    FLAG_WINDOW_TRANSPARENT: int
    FLAG_WINDOW_UNDECORATED: int
    FLAG_WINDOW_UNFOCUSED: int
    FONT_BITMAP: int
    FONT_DEFAULT: int
    FONT_SDF: int
    def fade(self, *args) -> struct: ...
    def file_exists(self, *args) -> int: ...
    GAMEPAD_AXIS_LEFT_TRIGGER: int
    GAMEPAD_AXIS_LEFT_X: int
    GAMEPAD_AXIS_LEFT_Y: int
    GAMEPAD_AXIS_RIGHT_TRIGGER: int
    GAMEPAD_AXIS_RIGHT_X: int
    GAMEPAD_AXIS_RIGHT_Y: int
    GAMEPAD_BUTTON_LEFT_FACE_DOWN: int
    GAMEPAD_BUTTON_LEFT_FACE_LEFT: int
    GAMEPAD_BUTTON_LEFT_FACE_RIGHT: int
    GAMEPAD_BUTTON_LEFT_FACE_UP: int
    GAMEPAD_BUTTON_LEFT_THUMB: int
    GAMEPAD_BUTTON_LEFT_TRIGGER_1: int
    GAMEPAD_BUTTON_LEFT_TRIGGER_2: int
    GAMEPAD_BUTTON_MIDDLE: int
    GAMEPAD_BUTTON_MIDDLE_LEFT: int
    GAMEPAD_BUTTON_MIDDLE_RIGHT: int
    GAMEPAD_BUTTON_RIGHT_FACE_DOWN: int
    GAMEPAD_BUTTON_RIGHT_FACE_LEFT: int
    GAMEPAD_BUTTON_RIGHT_FACE_RIGHT: int
    GAMEPAD_BUTTON_RIGHT_FACE_UP: int
    GAMEPAD_BUTTON_RIGHT_THUMB: int
    GAMEPAD_BUTTON_RIGHT_TRIGGER_1: int
    GAMEPAD_BUTTON_RIGHT_TRIGGER_2: int
    GAMEPAD_BUTTON_UNKNOWN: int
    GESTURE_DOUBLETAP: int
    GESTURE_DRAG: int
    GESTURE_HOLD: int
    GESTURE_NONE: int
    GESTURE_PINCH_IN: int
    GESTURE_PINCH_OUT: int
    GESTURE_SWIPE_DOWN: int
    GESTURE_SWIPE_LEFT: int
    GESTURE_SWIPE_RIGHT: int
    GESTURE_SWIPE_UP: int
    GESTURE_TAP: int
    def gen_image_cellular(self, *args) -> struct: ...
    def gen_image_checked(self, *args) -> struct: ...
    def gen_image_color(self, *args) -> struct: ...
    def gen_image_font_atlas(self, *args) -> struct: ...
    def gen_image_gradient_h(self, *args) -> struct: ...
    def gen_image_gradient_radial(self, *args) -> struct: ...
    def gen_image_gradient_v(self, *args) -> struct: ...
    def gen_image_perlin_noise(self, *args) -> struct: ...
    def gen_image_white_noise(self, *args) -> struct: ...
    def gen_mesh_cube(self, *args) -> struct: ...
    def gen_mesh_cubicmap(self, *args) -> struct: ...
    def gen_mesh_cylinder(self, *args) -> struct: ...
    def gen_mesh_heightmap(self, *args) -> struct: ...
    def gen_mesh_hemi_sphere(self, *args) -> struct: ...
    def gen_mesh_knot(self, *args) -> struct: ...
    def gen_mesh_plane(self, *args) -> struct: ...
    def gen_mesh_poly(self, *args) -> struct: ...
    def gen_mesh_sphere(self, *args) -> struct: ...
    def gen_mesh_torus(self, *args) -> struct: ...
    def gen_texture_mipmaps(self, *args) -> None: ...
    def get_camera_matrix(self, *args) -> struct: ...
    def get_camera_matrix_2d(self, *args) -> struct: ...
    def get_char_pressed(self, *args) -> int: ...
    def get_clipboard_text(self, *args) -> char: ...
    def get_codepoints(self, *args) -> int: ...
    def get_codepoints_count(self, *args) -> int: ...
    def get_collision_ray_ground(self, *args) -> struct: ...
    def get_collision_ray_mesh(self, *args) -> struct: ...
    def get_collision_ray_model(self, *args) -> struct: ...
    def get_collision_ray_triangle(self, *args) -> struct: ...
    def get_collision_rec(self, *args) -> struct: ...
    def get_color(self, *args) -> struct: ...
    def get_current_monitor(self, *args) -> int: ...
    def get_directory_files(self, *args) -> char: ...
    def get_directory_path(self, *args) -> char: ...
    def get_dropped_files(self, *args) -> char: ...
    def get_fps(self, *args) -> int: ...
    def get_file_extension(self, *args) -> char: ...
    def get_file_mod_time(self, *args) -> long: ...
    def get_file_name(self, *args) -> char: ...
    def get_file_name_without_ext(self, *args) -> char: ...
    def get_font_default(self, *args) -> struct: ...
    def get_frame_time(self, *args) -> float: ...
    def get_gamepad_axis_count(self, *args) -> int: ...
    def get_gamepad_axis_movement(self, *args) -> float: ...
    def get_gamepad_button_pressed(self, *args) -> int: ...
    def get_gamepad_name(self, *args) -> char: ...
    def get_gesture_detected(self, *args) -> int: ...
    def get_gesture_drag_angle(self, *args) -> float: ...
    def get_gesture_drag_vector(self, *args) -> struct: ...
    def get_gesture_hold_duration(self, *args) -> float: ...
    def get_gesture_pinch_angle(self, *args) -> float: ...
    def get_gesture_pinch_vector(self, *args) -> struct: ...
    def get_glyph_index(self, *args) -> int: ...
    def get_image_alpha_border(self, *args) -> struct: ...
    def get_key_pressed(self, *args) -> int: ...
    def get_monitor_count(self, *args) -> int: ...
    def get_monitor_height(self, *args) -> int: ...
    def get_monitor_name(self, *args) -> char: ...
    def get_monitor_physical_height(self, *args) -> int: ...
    def get_monitor_physical_width(self, *args) -> int: ...
    def get_monitor_position(self, *args) -> struct: ...
    def get_monitor_refresh_rate(self, *args) -> int: ...
    def get_monitor_width(self, *args) -> int: ...
    def get_mouse_position(self, *args) -> struct: ...
    def get_mouse_ray(self, *args) -> struct: ...
    def get_mouse_wheel_move(self, *args) -> float: ...
    def get_mouse_x(self, *args) -> int: ...
    def get_mouse_y(self, *args) -> int: ...
    def get_music_time_length(self, *args) -> float: ...
    def get_music_time_played(self, *args) -> float: ...
    def get_next_codepoint(self, *args) -> int: ...
    def get_pixel_color(self, *args) -> struct: ...
    def get_pixel_data_size(self, *args) -> int: ...
    def get_prev_directory_path(self, *args) -> char: ...
    def get_random_value(self, *args) -> int: ...
    def get_screen_data(self, *args) -> struct: ...
    def get_screen_height(self, *args) -> int: ...
    def get_screen_to_world_2d(self, *args) -> struct: ...
    def get_screen_width(self, *args) -> int: ...
    def get_shader_location(self, *args) -> int: ...
    def get_shader_location_attrib(self, *args) -> int: ...
    def get_sounds_playing(self, *args) -> int: ...
    def get_texture_data(self, *args) -> struct: ...
    def get_time(self, *args) -> double: ...
    def get_touch_points_count(self, *args) -> int: ...
    def get_touch_position(self, *args) -> struct: ...
    def get_touch_x(self, *args) -> int: ...
    def get_touch_y(self, *args) -> int: ...
    def get_window_handle(self, *args) -> None: ...
    def get_window_position(self, *args) -> struct: ...
    def get_window_scale_dpi(self, *args) -> struct: ...
    def get_working_directory(self, *args) -> char: ...
    def get_world_to_screen(self, *args) -> struct: ...
    def get_world_to_screen_2d(self, *args) -> struct: ...
    def get_world_to_screen_ex(self, *args) -> struct: ...
    def hide_cursor(self, *args) -> None: ...
    def image_alpha_clear(self, *args) -> None: ...
    def image_alpha_crop(self, *args) -> None: ...
    def image_alpha_mask(self, *args) -> None: ...
    def image_alpha_premultiply(self, *args) -> None: ...
    def image_clear_background(self, *args) -> None: ...
    def image_color_brightness(self, *args) -> None: ...
    def image_color_contrast(self, *args) -> None: ...
    def image_color_grayscale(self, *args) -> None: ...
    def image_color_invert(self, *args) -> None: ...
    def image_color_replace(self, *args) -> None: ...
    def image_color_tint(self, *args) -> None: ...
    def image_copy(self, *args) -> struct: ...
    def image_crop(self, *args) -> None: ...
    def image_dither(self, *args) -> None: ...
    def image_draw(self, *args) -> None: ...
    def image_draw_circle(self, *args) -> None: ...
    def image_draw_circle_v(self, *args) -> None: ...
    def image_draw_line(self, *args) -> None: ...
    def image_draw_line_v(self, *args) -> None: ...
    def image_draw_pixel(self, *args) -> None: ...
    def image_draw_pixel_v(self, *args) -> None: ...
    def image_draw_rectangle(self, *args) -> None: ...
    def image_draw_rectangle_lines(self, *args) -> None: ...
    def image_draw_rectangle_rec(self, *args) -> None: ...
    def image_draw_rectangle_v(self, *args) -> None: ...
    def image_draw_text(self, *args) -> None: ...
    def image_draw_text_ex(self, *args) -> None: ...
    def image_flip_horizontal(self, *args) -> None: ...
    def image_flip_vertical(self, *args) -> None: ...
    def image_format(self, *args) -> None: ...
    def image_from_image(self, *args) -> struct: ...
    def image_mipmaps(self, *args) -> None: ...
    def image_resize(self, *args) -> None: ...
    def image_resize_canvas(self, *args) -> None: ...
    def image_resize_nn(self, *args) -> None: ...
    def image_rotate_ccw(self, *args) -> None: ...
    def image_rotate_cw(self, *args) -> None: ...
    def image_text(self, *args) -> struct: ...
    def image_text_ex(self, *args) -> struct: ...
    def image_to_pot(self, *args) -> None: ...
    def init_audio_device(self, *args) -> None: ...
    def init_audio_stream(self, *args) -> struct: ...
    def init_window(self, *args) -> None: ...
    def is_audio_device_ready(self, *args) -> int: ...
    def is_audio_stream_playing(self, *args) -> int: ...
    def is_audio_stream_processed(self, *args) -> int: ...
    def is_cursor_hidden(self, *args) -> int: ...
    def is_cursor_on_screen(self, *args) -> int: ...
    def is_file_dropped(self, *args) -> int: ...
    def is_file_extension(self, *args) -> int: ...
    def is_gamepad_available(self, *args) -> int: ...
    def is_gamepad_button_down(self, *args) -> int: ...
    def is_gamepad_button_pressed(self, *args) -> int: ...
    def is_gamepad_button_released(self, *args) -> int: ...
    def is_gamepad_button_up(self, *args) -> int: ...
    def is_gamepad_name(self, *args) -> int: ...
    def is_gesture_detected(self, *args) -> int: ...
    def is_key_down(self, *args) -> int: ...
    def is_key_pressed(self, *args) -> int: ...
    def is_key_released(self, *args) -> int: ...
    def is_key_up(self, *args) -> int: ...
    def is_model_animation_valid(self, *args) -> int: ...
    def is_mouse_button_down(self, *args) -> int: ...
    def is_mouse_button_pressed(self, *args) -> int: ...
    def is_mouse_button_released(self, *args) -> int: ...
    def is_mouse_button_up(self, *args) -> int: ...
    def is_music_playing(self, *args) -> int: ...
    def is_sound_playing(self, *args) -> int: ...
    def is_window_focused(self, *args) -> int: ...
    def is_window_fullscreen(self, *args) -> int: ...
    def is_window_hidden(self, *args) -> int: ...
    def is_window_maximized(self, *args) -> int: ...
    def is_window_minimized(self, *args) -> int: ...
    def is_window_ready(self, *args) -> int: ...
    def is_window_resized(self, *args) -> int: ...
    def is_window_state(self, *args) -> int: ...
    KEY_A: int
    KEY_APOSTROPHE: int
    KEY_B: int
    KEY_BACK: int
    KEY_BACKSLASH: int
    KEY_BACKSPACE: int
    KEY_C: int
    KEY_CAPS_LOCK: int
    KEY_COMMA: int
    KEY_D: int
    KEY_DELETE: int
    KEY_DOWN: int
    KEY_E: int
    KEY_EIGHT: int
    KEY_END: int
    KEY_ENTER: int
    KEY_EQUAL: int
    KEY_ESCAPE: int
    KEY_F: int
    KEY_F1: int
    KEY_F10: int
    KEY_F11: int
    KEY_F12: int
    KEY_F2: int
    KEY_F3: int
    KEY_F4: int
    KEY_F5: int
    KEY_F6: int
    KEY_F7: int
    KEY_F8: int
    KEY_F9: int
    KEY_FIVE: int
    KEY_FOUR: int
    KEY_G: int
    KEY_GRAVE: int
    KEY_H: int
    KEY_HOME: int
    KEY_I: int
    KEY_INSERT: int
    KEY_J: int
    KEY_K: int
    KEY_KB_MENU: int
    KEY_KP_0: int
    KEY_KP_1: int
    KEY_KP_2: int
    KEY_KP_3: int
    KEY_KP_4: int
    KEY_KP_5: int
    KEY_KP_6: int
    KEY_KP_7: int
    KEY_KP_8: int
    KEY_KP_9: int
    KEY_KP_ADD: int
    KEY_KP_DECIMAL: int
    KEY_KP_DIVIDE: int
    KEY_KP_ENTER: int
    KEY_KP_EQUAL: int
    KEY_KP_MULTIPLY: int
    KEY_KP_SUBTRACT: int
    KEY_L: int
    KEY_LEFT: int
    KEY_LEFT_ALT: int
    KEY_LEFT_BRACKET: int
    KEY_LEFT_CONTROL: int
    KEY_LEFT_SHIFT: int
    KEY_LEFT_SUPER: int
    KEY_M: int
    KEY_MENU: int
    KEY_MINUS: int
    KEY_N: int
    KEY_NINE: int
    KEY_NULL: int
    KEY_NUM_LOCK: int
    KEY_O: int
    KEY_ONE: int
    KEY_P: int
    KEY_PAGE_DOWN: int
    KEY_PAGE_UP: int
    KEY_PAUSE: int
    KEY_PERIOD: int
    KEY_PRINT_SCREEN: int
    KEY_Q: int
    KEY_R: int
    KEY_RIGHT: int
    KEY_RIGHT_ALT: int
    KEY_RIGHT_BRACKET: int
    KEY_RIGHT_CONTROL: int
    KEY_RIGHT_SHIFT: int
    KEY_RIGHT_SUPER: int
    KEY_S: int
    KEY_SCROLL_LOCK: int
    KEY_SEMICOLON: int
    KEY_SEVEN: int
    KEY_SIX: int
    KEY_SLASH: int
    KEY_SPACE: int
    KEY_T: int
    KEY_TAB: int
    KEY_THREE: int
    KEY_TWO: int
    KEY_U: int
    KEY_UP: int
    KEY_V: int
    KEY_VOLUME_DOWN: int
    KEY_VOLUME_UP: int
    KEY_W: int
    KEY_X: int
    KEY_Y: int
    KEY_Z: int
    KEY_ZERO: int
    LOG_ALL: int
    LOG_DEBUG: int
    LOG_ERROR: int
    LOG_FATAL: int
    LOG_INFO: int
    LOG_NONE: int
    LOG_TRACE: int
    LOG_WARNING: int
    def load_file_data(self, *args) -> char: ...
    def load_file_text(self, *args) -> char: ...
    def load_font(self, *args) -> struct: ...
    def load_font_data(self, *args) -> struct: ...
    def load_font_ex(self, *args) -> struct: ...
    def load_font_from_image(self, *args) -> struct: ...
    def load_font_from_memory(self, *args) -> struct: ...
    def load_image(self, *args) -> struct: ...
    def load_image_anim(self, *args) -> struct: ...
    def load_image_colors(self, *args) -> struct: ...
    def load_image_from_memory(self, *args) -> struct: ...
    def load_image_palette(self, *args) -> struct: ...
    def load_image_raw(self, *args) -> struct: ...
    def load_material_default(self, *args) -> struct: ...
    def load_materials(self, *args) -> struct: ...
    def load_model(self, *args) -> struct: ...
    def load_model_animations(self, *args) -> struct: ...
    def load_model_from_mesh(self, *args) -> struct: ...
    def load_music_stream(self, *args) -> struct: ...
    def load_music_stream_from_memory(self, *args) -> struct: ...
    def load_render_texture(self, *args) -> struct: ...
    def load_shader(self, *args) -> struct: ...
    def load_shader_from_memory(self, *args) -> struct: ...
    def load_sound(self, *args) -> struct: ...
    def load_sound_from_wave(self, *args) -> struct: ...
    def load_storage_value(self, *args) -> int: ...
    def load_texture(self, *args) -> struct: ...
    def load_texture_cubemap(self, *args) -> struct: ...
    def load_texture_from_image(self, *args) -> struct: ...
    def load_vr_stereo_config(self, *args) -> struct: ...
    def load_wave(self, *args) -> struct: ...
    def load_wave_from_memory(self, *args) -> struct: ...
    def load_wave_samples(self, *args) -> float: ...
    MATERIAL_MAP_ALBEDO: int
    MATERIAL_MAP_BRDG: int
    MATERIAL_MAP_CUBEMAP: int
    MATERIAL_MAP_DIFFUSE: int
    MATERIAL_MAP_EMISSION: int
    MATERIAL_MAP_HEIGHT: int
    MATERIAL_MAP_IRRADIANCE: int
    MATERIAL_MAP_METALNESS: int
    MATERIAL_MAP_NORMAL: int
    MATERIAL_MAP_OCCLUSION: int
    MATERIAL_MAP_PREFILTER: int
    MATERIAL_MAP_ROUGHNESS: int
    MATERIAL_MAP_SPECULAR: int
    MOUSE_CURSOR_ARROW: int
    MOUSE_CURSOR_CROSSHAIR: int
    MOUSE_CURSOR_DEFAULT: int
    MOUSE_CURSOR_IBEAM: int
    MOUSE_CURSOR_NOT_ALLOWED: int
    MOUSE_CURSOR_POINTING_HAND: int
    MOUSE_CURSOR_RESIZE_ALL: int
    MOUSE_CURSOR_RESIZE_EW: int
    MOUSE_CURSOR_RESIZE_NESW: int
    MOUSE_CURSOR_RESIZE_NS: int
    MOUSE_CURSOR_RESIZE_NWSE: int
    MOUSE_LEFT_BUTTON: int
    MOUSE_MIDDLE_BUTTON: int
    MOUSE_RIGHT_BUTTON: int
    def maximize_window(self, *args) -> None: ...
    def measure_text(self, *args) -> int: ...
    def measure_text_ex(self, *args) -> struct: ...
    def mem_alloc(self, *args) -> None: ...
    def mem_free(self, *args) -> None: ...
    def mem_realloc(self, *args) -> None: ...
    def mesh_binormals(self, *args) -> None: ...
    def mesh_bounding_box(self, *args) -> struct: ...
    def mesh_tangents(self, *args) -> None: ...
    def minimize_window(self, *args) -> None: ...
    NPATCH_NINE_PATCH: int
    NPATCH_THREE_PATCH_HORIZONTAL: int
    NPATCH_THREE_PATCH_VERTICAL: int
    def open_url(self, *args) -> None: ...
    PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA: int
    PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA: int
    PIXELFORMAT_COMPRESSED_DXT1_RGB: int
    PIXELFORMAT_COMPRESSED_DXT1_RGBA: int
    PIXELFORMAT_COMPRESSED_DXT3_RGBA: int
    PIXELFORMAT_COMPRESSED_DXT5_RGBA: int
    PIXELFORMAT_COMPRESSED_ETC1_RGB: int
    PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA: int
    PIXELFORMAT_COMPRESSED_ETC2_RGB: int
    PIXELFORMAT_COMPRESSED_PVRT_RGB: int
    PIXELFORMAT_COMPRESSED_PVRT_RGBA: int
    PIXELFORMAT_UNCOMPRESSED_GRAYSCALE: int
    PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA: int
    PIXELFORMAT_UNCOMPRESSED_R32: int
    PIXELFORMAT_UNCOMPRESSED_R32G32B32: int
    PIXELFORMAT_UNCOMPRESSED_R32G32B32A32: int
    PIXELFORMAT_UNCOMPRESSED_R4G4B4A4: int
    PIXELFORMAT_UNCOMPRESSED_R5G5B5A1: int
    PIXELFORMAT_UNCOMPRESSED_R5G6B5: int
    PIXELFORMAT_UNCOMPRESSED_R8G8B8: int
    PIXELFORMAT_UNCOMPRESSED_R8G8B8A8: int
    def pause_audio_stream(self, *args) -> None: ...
    def pause_music_stream(self, *args) -> None: ...
    def pause_sound(self, *args) -> None: ...
    def play_audio_stream(self, *args) -> None: ...
    def play_music_stream(self, *args) -> None: ...
    def play_sound(self, *args) -> None: ...
    def play_sound_multi(self, *args) -> None: ...
    def restore_window(self, *args) -> None: ...
    def resume_audio_stream(self, *args) -> None: ...
    def resume_music_stream(self, *args) -> None: ...
    def resume_sound(self, *args) -> None: ...
    SHADER_LOC_COLOR_AMBIENT: int
    SHADER_LOC_COLOR_DIFFUSE: int
    SHADER_LOC_COLOR_SPECULAR: int
    SHADER_LOC_MAP_ALBEDO: int
    SHADER_LOC_MAP_BRDF: int
    SHADER_LOC_MAP_CUBEMAP: int
    SHADER_LOC_MAP_DIFFUSE: int
    SHADER_LOC_MAP_EMISSION: int
    SHADER_LOC_MAP_HEIGHT: int
    SHADER_LOC_MAP_IRRADIANCE: int
    SHADER_LOC_MAP_METALNESS: int
    SHADER_LOC_MAP_NORMAL: int
    SHADER_LOC_MAP_OCCLUSION: int
    SHADER_LOC_MAP_PREFILTER: int
    SHADER_LOC_MAP_ROUGHNESS: int
    SHADER_LOC_MAP_SPECULAR: int
    SHADER_LOC_MATRIX_MODEL: int
    SHADER_LOC_MATRIX_MVP: int
    SHADER_LOC_MATRIX_NORMAL: int
    SHADER_LOC_MATRIX_PROJECTION: int
    SHADER_LOC_MATRIX_VIEW: int
    SHADER_LOC_VECTOR_VIEW: int
    SHADER_LOC_VERTEX_COLOR: int
    SHADER_LOC_VERTEX_NORMAL: int
    SHADER_LOC_VERTEX_POSITION: int
    SHADER_LOC_VERTEX_TANGENT: int
    SHADER_LOC_VERTEX_TEXCOORD01: int
    SHADER_LOC_VERTEX_TEXCOORD02: int
    SHADER_UNIFORM_FLOAT: int
    SHADER_UNIFORM_INT: int
    SHADER_UNIFORM_IVEC2: int
    SHADER_UNIFORM_IVEC3: int
    SHADER_UNIFORM_IVEC4: int
    SHADER_UNIFORM_SAMPLER2D: int
    SHADER_UNIFORM_VEC2: int
    SHADER_UNIFORM_VEC3: int
    SHADER_UNIFORM_VEC4: int
    def save_file_data(self, *args) -> int: ...
    def save_file_text(self, *args) -> int: ...
    def save_storage_value(self, *args) -> int: ...
    def set_audio_stream_buffer_size_default(self, *args) -> None: ...
    def set_audio_stream_pitch(self, *args) -> None: ...
    def set_audio_stream_volume(self, *args) -> None: ...
    def set_camera_alt_control(self, *args) -> None: ...
    def set_camera_mode(self, *args) -> None: ...
    def set_camera_move_controls(self, *args) -> None: ...
    def set_camera_pan_control(self, *args) -> None: ...
    def set_camera_smooth_zoom_control(self, *args) -> None: ...
    def set_clipboard_text(self, *args) -> None: ...
    def set_config_flags(self, *args) -> None: ...
    def set_exit_key(self, *args) -> None: ...
    def set_gamepad_mappings(self, *args) -> int: ...
    def set_gestures_enabled(self, *args) -> None: ...
    def set_master_volume(self, *args) -> None: ...
    def set_material_texture(self, *args) -> None: ...
    def set_model_mesh_material(self, *args) -> None: ...
    def set_mouse_cursor(self, *args) -> None: ...
    def set_mouse_offset(self, *args) -> None: ...
    def set_mouse_position(self, *args) -> None: ...
    def set_mouse_scale(self, *args) -> None: ...
    def set_music_pitch(self, *args) -> None: ...
    def set_music_volume(self, *args) -> None: ...
    def set_pixel_color(self, *args) -> None: ...
    def set_shader_value(self, *args) -> None: ...
    def set_shader_value_matrix(self, *args) -> None: ...
    def set_shader_value_texture(self, *args) -> None: ...
    def set_shader_value_v(self, *args) -> None: ...
    def set_shapes_texture(self, *args) -> None: ...
    def set_sound_pitch(self, *args) -> None: ...
    def set_sound_volume(self, *args) -> None: ...
    def set_target_fps(self, *args) -> None: ...
    def set_texture_filter(self, *args) -> None: ...
    def set_texture_wrap(self, *args) -> None: ...
    def set_trace_log_level(self, *args) -> None: ...
    def set_window_icon(self, *args) -> None: ...
    def set_window_min_size(self, *args) -> None: ...
    def set_window_monitor(self, *args) -> None: ...
    def set_window_position(self, *args) -> None: ...
    def set_window_size(self, *args) -> None: ...
    def set_window_state(self, *args) -> None: ...
    def set_window_title(self, *args) -> None: ...
    def show_cursor(self, *args) -> None: ...
    def stop_audio_stream(self, *args) -> None: ...
    def stop_music_stream(self, *args) -> None: ...
    def stop_sound(self, *args) -> None: ...
    def stop_sound_multi(self, *args) -> None: ...
    TEXTURE_FILTER_ANISOTROPIC_16X: int
    TEXTURE_FILTER_ANISOTROPIC_4X: int
    TEXTURE_FILTER_ANISOTROPIC_8X: int
    TEXTURE_FILTER_BILINEAR: int
    TEXTURE_FILTER_POINT: int
    TEXTURE_FILTER_TRILINEAR: int
    TEXTURE_WRAP_CLAMP: int
    TEXTURE_WRAP_MIRROR_CLAMP: int
    TEXTURE_WRAP_MIRROR_REPEAT: int
    TEXTURE_WRAP_REPEAT: int
    def take_screenshot(self, *args) -> None: ...
    def text_append(self, *args) -> None: ...
    def text_copy(self, *args) -> int: ...
    def text_find_index(self, *args) -> int: ...
    TextFormat: _cffi_backend._CDataBase
    def text_insert(self, *args) -> char: ...
    def text_is_equal(self, *args) -> int: ...
    def text_join(self, *args) -> char: ...
    def text_length(self, *args) -> int: ...
    def text_replace(self, *args) -> char: ...
    def text_split(self, *args) -> char: ...
    def text_subtext(self, *args) -> char: ...
    def text_to_integer(self, *args) -> int: ...
    def text_to_lower(self, *args) -> char: ...
    def text_to_pascal(self, *args) -> char: ...
    def text_to_upper(self, *args) -> char: ...
    def text_to_utf8(self, *args) -> char: ...
    def toggle_fullscreen(self, *args) -> None: ...
    TraceLog: _cffi_backend._CDataBase
    def unload_file_data(self, *args) -> None: ...
    def unload_file_text(self, *args) -> None: ...
    def unload_font(self, *args) -> None: ...
    def unload_font_data(self, *args) -> None: ...
    def unload_image(self, *args) -> None: ...
    def unload_image_colors(self, *args) -> None: ...
    def unload_image_palette(self, *args) -> None: ...
    def unload_material(self, *args) -> None: ...
    def unload_mesh(self, *args) -> None: ...
    def unload_model(self, *args) -> None: ...
    def unload_model_animation(self, *args) -> None: ...
    def unload_model_animations(self, *args) -> None: ...
    def unload_model_keep_meshes(self, *args) -> None: ...
    def unload_music_stream(self, *args) -> None: ...
    def unload_render_texture(self, *args) -> None: ...
    def unload_shader(self, *args) -> None: ...
    def unload_sound(self, *args) -> None: ...
    def unload_texture(self, *args) -> None: ...
    def unload_vr_stereo_config(self, *args) -> None: ...
    def unload_wave(self, *args) -> None: ...
    def unload_wave_samples(self, *args) -> None: ...
    def update_audio_stream(self, *args) -> None: ...
    def update_camera(self, *args) -> None: ...
    def update_mesh_buffer(self, *args) -> None: ...
    def update_model_animation(self, *args) -> None: ...
    def update_music_stream(self, *args) -> None: ...
    def update_sound(self, *args) -> None: ...
    def update_texture(self, *args) -> None: ...
    def update_texture_rec(self, *args) -> None: ...
    def upload_mesh(self, *args) -> None: ...
    def wave_copy(self, *args) -> struct: ...
    def wave_crop(self, *args) -> None: ...
    def wave_format(self, *args) -> None: ...
    def window_should_close(self, *args) -> int: ...
    Vector2: struct
    Vector3: struct
    Vector4: struct
    Camera2D: struct
    Camera3D: struct
    Quaternion: struct
    Color: struct
    Rectangle: struct

