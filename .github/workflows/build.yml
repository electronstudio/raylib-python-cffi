name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build-mac:
    runs-on: macos-11
    strategy:
      matrix:
        python-version: [ '3.8', '3.9', '3.10', '3.11', '3.12', '3.13.0-beta - 3.13.0', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=OFF -DCUSTOMIZE_BUILD=ON -DSUPPORT_FILEFORMAT_JPG=ON -DSUPPORT_FILEFORMAT_FLAC=ON -DWITH_PIC=ON -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install

      - name: Copy extras
        run: |
          sudo cp -r raylib-c/src/external/glfw/include/GLFW /usr/local/include/
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install "cffi>=1.17.0rc1"
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name macosx_10_15_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

#  build-mac12-arm64:
#    runs-on: macos-12
#    strategy:
#      matrix:
#        python-version: ['3.10', '3.11.0-alpha - 3.11.0' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      # Only build raylib for arm64 (although we could make a fat universal2 binary by asking for x86_64 as well)
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"  -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#      # Name defaults to universal2 and it technically is, but we override name to arm64.  Why don't we make a working universal2 wheel?  Because
#      # I'd rather have a separate x86_64 that I can test, and I want it to work on 10_15 but I'm not sure a 'macosx_10_15_universal2' is valid
#      # given that there is no SDK for universal until macosx_11_0
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_12_0_arm64
#
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#
#
#  build-mac11-arm64:
#    runs-on: macos-11
#    strategy:
#      matrix:
#        python-version: [ '3.10.5' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    env:
#      MACOSX_DEPLOYMENT_TARGET: 11.6
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      #  build raylib for arm64 and x86_64 as well
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_11_0_arm64
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#


  build-linux:
    runs-on: ubuntu-20.04
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version: [ '3.8', '3.9', '3.10', '3.11', '3.12', '3.13.0-beta - 3.13.0',  'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=OFF -DCUSTOMIZE_BUILD=ON -DSUPPORT_FILEFORMAT_JPG=ON -DSUPPORT_FILEFORMAT_FLAC=ON -DWITH_PIC=ON -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp -r raylib-c/src/external/glfw/include/GLFW /usr/local/include/
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/
      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install "cffi>=1.17.0rc1"
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name manylinux2014_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*


#  build-rpi:
#    runs-on: rpi
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
#          make -j2
#          make install
#      - name: Copy extras
#        run: |
#          cp physac/src/physac.h /usr/local/include/
#          cp raygui/src/raygui.h /usr/local/include/
#
#      - name: Build raylib-python-cffi
#        run: |
#          python3 setup.py bdist_wheel
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*

  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-2019
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version:  [ '3.8', '3.9', '3.10', '3.11', '3.12', '3.13.0-beta - 3.13.0',  'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=OFF -DCUSTOMIZE_BUILD=ON -DSUPPORT_FILEFORMAT_JPG=ON -DSUPPORT_FILEFORMAT_FLAC=ON -DWITH_PIC=ON -DCMAKE_BUILD_TYPE=Release ..
          msbuild raylib.sln /target:raylib /property:Configuration=Release
          copy raylib\Release\raylib.lib ..\..
          cd ..\..
        shell: cmd

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install "cffi>=1.17.0rc1"
          pip3 install wheel
          pip3 install setuptools
          del raylib\dynamic\*.so* >nul 2>&1
          del raylib\dynamic\*.dll >nul 2>&1
          del raylib\dynamic\*.dylib >nul 2>&1
          del raylib\dynamic\32bit\* >nul 2>&1
          python setup.py bdist_wheel
        shell: cmd
          
      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/* 
          
  source-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.12'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=OFF -DCUSTOMIZE_BUILD=ON -DSUPPORT_FILEFORMAT_JPG=ON -DSUPPORT_FILEFORMAT_FLAC=ON -DWITH_PIC=ON -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp -r raylib-c/src/external/glfw/include/GLFW /usr/local/include/
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install "cffi>=1.17.0rc1"
          pip3 install wheel
          pip3 install setuptools
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

  dynamic-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.12'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib-python-cffi-dynamic
        run: |
          python -m pip install --upgrade pip
          pip3 install "cffi>=1.17.0rc1"
          pip3 install wheel
          pip3 install setuptools
          cd dynamic
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dynamic/dist/*
